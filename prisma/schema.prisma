// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")

    relationMode = "prisma"
}

model Event {
    id                String             @id @default(cuid())
    name              String
    closeRegistration Boolean            @default(false)
    scheduleTime      DateTime
    timeStart3km      DateTime?
    timeStart5km      DateTime?
    timeStart10km     DateTime?
    raceFinished3km   Boolean            @default(false)
    raceFinished5km   Boolean            @default(false)
    raceFinished10km  Boolean            @default(false)
    cameraPassword    String             @default("hatawbataan")
    image             String?
    address           String
    shirtLimit        Int                @default(0)
    enableEdit        Boolean            @default(false)
    eventParticipant  EventParticipant[]
    eventWinner       EventWinner[]
    createdAt         DateTime           @default(now())
    reserve           Int                @default(0)
}

model EventWinner {
    id                 Int      @id @default(autoincrement())
    registrationNumber Int
    name               String
    price              String
    isClaimed          Boolean  @default(false)
    eventId            String?
    Event              Event?   @relation(fields: [eventId], references: [id])
    createdAt          DateTime @default(now())

    @@index([eventId])
}

enum Gender {
    MALE
    FEMALE
}

enum ShirtSize {
    XS
    S
    MD
    L
    XL
    XXL
    XXXL
    XXXXL
    XXXXXL
}

enum Municipality {
    ABUCAY
    BAGAC
    BALANGA
    DINALUPIHAN
    HERMOSA
    LIMAY
    MARIVELES
    MORONG
    ORANI
    ORION
    PILAR
    SAMAL
}

model EventParticipant {
    id                 String    @id @default(cuid())
    registrationNumber Int       @unique
    distance           Int
    timeFinished       DateTime?
    shirtSize          ShirtSize
    enableCamera       Boolean   @default(false)
    raceEnded          Boolean   @default(false)
    profile            Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId          String
    event              Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId            String
    noTshirt           Boolean   @default(false)
    createdAt          DateTime  @default(now())

    @@unique([eventId, profileId])
    @@index([profileId])
}

model Profile {
    id                     String             @id @default(cuid())
    firstName              String
    lastName               String
    gender                 Gender
    birthdate              DateTime?
    contactNumber          String
    municipality           Municipality?
    address                String?
    emergencyContact       String?
    emergencyContactNumber String?
    firstTime              Boolean            @default(true)
    officials              Boolean            @default(false)
    eventParticitpant      EventParticipant[]
    updatedAt              DateTime           @updatedAt
    createdAt              DateTime           @default(now())

    user User?

    @@unique([firstName, lastName, birthdate])
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum UserRole {
    USER
    ADMIN
    SUPERADMIN
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          UserRole  @default(USER)
    profile       Profile?  @relation(fields: [profileId], references: [id])
    profileId     String?   @unique
    unclaimed     String?   @unique
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
